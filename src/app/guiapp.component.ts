import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { FormGroup,  FormBuilder, FormControl, Validators } from '@angular/forms';

import { guessComponentId } from './utils';
import { makeMetainfoGuiApp, BasicASInfo, GUIAppInfo } from './makemetainfo';

@Component({
    selector: 'app-guiapp',
    templateUrl: './guiapp.component.html'
})

export class GUIAppComponent implements OnInit
{
    cptForm: FormGroup;
    cid: string;
    cidAutogenerated: boolean;

    appName: string;
    appHomepage: string;

    metadataLicenses: any;
    spdxLicenses: any;

    dataGenerated: boolean;
    dataMetainfo: string;

    constructor(private fb: FormBuilder,
                private http: HttpClient)
    {
        this.cid = 'home.invalid.app';
        this.cidAutogenerated = true;
        this.dataGenerated = false;
    }

    ngOnInit()
    {
        this.metadataLicenses = this.http.get('/assets/metadata-licenses.json');
        this.spdxLicenses = this.http.get('/assets/spdx-licenses.json');
        this.createForm();
    };

    createForm()
    {
        this.cptForm = this.fb.group({
            appName: ['', Validators.required ],
            appSummary: ['', Validators.required ],
            appHomepage: ['', Validators.required ],
            appDescription: ['', Validators.required ],
            cptId: ['', Validators.required ],
            metadataLicense: ['', Validators.required ],
            simpleProjectLicense: new FormControl({value: '', disabled: false}),
            complexProjectLicense: new FormControl({value: '', disabled: true})
        });

        this.cptForm.get('cptId').valueChanges.subscribe(value => {
          this.cidAutogenerated = false;
          this.cid = value;
        });

        this.cptForm.get('appName').valueChanges.subscribe(value => {
          this.appName = value;
          if (this.cidAutogenerated)
            this.cid = guessComponentId(this.appHomepage, this.appName);
        });

        this.cptForm.get('appHomepage').valueChanges.subscribe(value => {
          if (value.startsWith('http'))
            this.appHomepage = value;
          else
            this.appHomepage = 'https://' + value;
          if (this.cidAutogenerated)
            this.cid = guessComponentId(this.appHomepage, this.appName);
        });
    }

    licenseModeSimpleChange(evt)
    {
        if (evt.target.checked) {
            this.complexProjectLicense.disable();
            this.simpleProjectLicense.enable();
        } else {
            this.complexProjectLicense.enable();
            this.simpleProjectLicense.disable();
        }
    }

    licenseModeSPDXExprChange(evt)
    {
        if (evt.target.checked) {
            this.complexProjectLicense.enable();
            this.simpleProjectLicense.disable();
        } else {
            this.complexProjectLicense.disable();
            this.simpleProjectLicense.enable();
        }
    }

    get metadataLicense() {
        return this.cptForm.get('metadataLicense');
    }

    get simpleProjectLicense() {
        return this.cptForm.get('simpleProjectLicense');
    }

    get complexProjectLicense() {
        return this.cptForm.get('complexProjectLicense');
    }

    generate()
    {
        let pLicense;
        if (this.simpleProjectLicense.enabled)
            pLicense = this.simpleProjectLicense.value;
        else
            pLicense = this.complexProjectLicense.value;

        let baseInfo: BasicASInfo = {
            cid: this.cid,
            name: this.appName,
            summary: this.cptForm.value.appSummary,
            metadataLicense: this.metadataLicense.value,
            projectLicense: pLicense,
            description: this.cptForm.value.appDescription
        };
        let appInfo: GUIAppInfo = {test: 'none'};

        this.dataGenerated = true;
        this.dataMetainfo = makeMetainfoGuiApp(baseInfo, appInfo);
    }
}
